ActionType Input::GetUserAction() const
{	
	//This function reads the position where the user clicks to determine the desired action

	int x,y;
	pWind->WaitMouseClick(x, y);	//Get the coordinates of the user click

	if(UI.AppMode == DESIGN )	//application is in design mode
	{
		//[1] If user clicks on the Toolbar
		if ( y >= 0 && y < UI.TlBrWdth)
		{	
			//Check whick Menu item was clicked
			//This assumes that menu items are lined up horizontally
			int ClickedItem = (x / UI.MnItWdth);
			//Divide x coord of the point clicked by the menu item width (int division)
			//if division result is 0 ==>+ first item is clicked, if 1 ==> 2nd item and so on  //EDITED BY ADDING NEW CASES
			ClickedItem = (y >= 80) ? ClickedItem + 15 : ClickedItem;
			switch (ClickedItem)
			{
			case ITM_SMPL_ASSIGN: return ADD_SMPL_ASSIGN;
			
			case ITM_COND: return ADD_CONDITION;

			//BEGIN ADDED CASES

			case ITM_VAR_ASSIGN : return ADD_VAR_ASSIGN;

			case ITM_SINGLE_OPERATOR: return ADD_SINGLE_OPERATOR;

			case ITM_CONNECT : return ADD_CONNECTOR;

			case ITM_EDIT_STAT : return EDIT_STAT;

			case ITM_MULTISELECT: return MULTISELECT;
			//case ITM_SELECT : return SELECT;

			case ITM_DEL : return DEL;

			case ITM_MOVE : return MOVE;

			case ITM_ZOOM_IN : return ZoomIn;

			case ITM_ZOOM_OUT:return ZoomOut;

			case ITM_INFO:return INFO;

			case ITM_SAVE : return SAVE;

			case ITM_LOAD : return LOAD;
			
			case ITM_UNDO:return UNDO;

			case ITM_REDO:return REDO;
			//case ITM_STATUS :	return STATUS;

			//case ITM_DSN_TOOL :	return DSN_TOOL;

			case ITM_SIM_MODE :	return SIM_MODE;

			case ITM_ADD_COMMENT: return ADD_COMMENT; 
			case ITM_EDIT_CONNECT: return EDIT_CONNECT;
			case ITM_COPY: return COPY;
			case ITM_CUT: return CUT;
			case ITM_PASTE: return PASTE;
			case ITM_START: return START;
			case ITM_END: return END;
			case ITM_READ: return READ;
			case ITM_WRITE: return WRITE;

				//for exit 
			/*case ITM_EXIT3: return EXIT;	
			case ITM_EXIT: return EXIT;
			case ITM_EXIT2: return EXIT;
			case ITM_EXIT4: return EXIT;*/

				//END ADDED CASES

			default: return EXIT;
			}
		}

	
		//[2] User clicks on the drawing area
		if ( y >= UI.TlBrWdth && y < UI.height - UI.StBrWdth)
		{
			return SELECT;	//user want to select/unselect a statement in the flowchart
		}
		
		//[3] User clicks on the status bar
		return STATUS;
	}
	else	//Application is in Simulation mode
	{
		if ( y >= 0 && y < UI.TlBrWdth)
		{	
			int ClickedItem = (x / UI.SimItWdth);
			switch (ClickedItem)
			{
			case ITM_CHART_VALIDATION: return CHART_VALIDATION;
			case ITM_RUN: return RUN;
			case ITM_STP: return STP;
			case ITM_GENERATE: return GENERATE;
			case ITM_INFOSIM: return INFO;
			case ITM_DSN_MODE: return DSN_MODE;	
			case ITM_EXITSIM: return EXIT;

			default: return SIM_TOOL;	
			}

		//return SIM_MODE;	//This should be changed after creating the compelete simulation bar 

	}
		//[2] User clicks on the drawing area
		if ( y >= UI.TlBrWdth && y < UI.height - UI.StBrWdth)
		{
			return SELECT;	//user want to select/unselect a statement in the flowchart
		}
		
		//[3] User clicks on the status bar
		return STATUS;

  }
}
////////////////////////////////////////////////////////////////////////////////////////////////////
void ApplicationManager::ExecuteAction(ActionType ActType) 
{
	pOut->ClearStatusBar();
	Action* pAct = NULL;
	
	//According to ActioType, create the corresponding action object
	switch (ActType)
	{

		case START:
			pAct = new AddStart(this);
			break;

		case READ:
			pAct = new Add_Read_Stat(this);
			break;

		case ADD_CONDITION:
			///create AddCondition Action here
			pAct = new AddCond(this);
			break;

		case ADD_SMPL_ASSIGN:
			pAct = new AddSmplAssign(this);
			break;

		case ADD_VAR_ASSIGN:
			pAct = new AddVarAssign(this);
			break;

		case ADD_SINGLE_OPERATOR:
			pAct = new AddSingleOperator(this);
			break;

		case WRITE:
			pAct = new Add_Write_Stat(this);
			break;

		case COPY:
			pAct = new Copy(this);
			break;

		case PASTE:
			pAct = new Paste(this);
			break;

		case MOVE:
			pAct = new Move(this);
			break;

		case CUT:
			pAct = new Cut(this);
			break;

		case DEL:
			pAct = new Delete(this);
			break;

		case MULTISELECT:
			pAct = new MultiSelect(this);
			break;

		case END:
			pAct = new AddEnd(this);
			break;

		case ADD_COMMENT:
			pAct = new Comment(this);
			break;

		case EDIT_STAT:
			pAct = new Edit(this);
			break;

		case SELECT:
			///create Select Action here
			pAct = new Select(this);
			break;

		case SAVE:
			pAct = new Save(this);
			break;

		case LOAD:
			pAct = new Load(this);
			break;


		case EXIT:
			///create Exit Action here
			
			break;

		case SIM_MODE:
			pOut->PrintMessage("Action: Switch to Simulation Mode, creating simualtion tool bar");
			pOut->CreateSimulationToolBar();
			currentmode = SIMULATION;
			break;
		
		case DSN_MODE:
			pOut->PrintMessage("Action: Switch to Design Mode, creating Design tool bar");
			pOut->CreateDesignToolBar();
			currentmode = DESIGN;
			break;

		case CHART_VALIDATION:
			pAct = new Validate(this);
			break;

		case STATUS:
			return;
	}
	
	//Execute the created action
	if(pAct != NULL)
	{
		pAct->Execute();//Execute
		delete pAct;	//Action is not needed any more ==> delete it
	}
}
